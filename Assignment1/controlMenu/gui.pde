/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void forwardClick(GButton source, GEvent event) { //_CODE_:forwardButton:375791:
  myPort.write('w');
  zumoMessageField.setText("Moving forward");
} //_CODE_:forwardButton:375791:

public void reverseClick(GButton source, GEvent event) { //_CODE_:reverseButton:887436:
  myPort.write('s');
  zumoMessageField.setText("Reversing");
} //_CODE_:reverseButton:887436:

public void stopClick(GButton source, GEvent event) { //_CODE_:stopButton:957964:
  myPort.write('x');
  zumoMessageField.setText("Halting");
} //_CODE_:stopButton:957964:

public void leftClick(GButton source, GEvent event) { //_CODE_:leftButton:973729:
  if (corner[0] == '@')
  {
    corner[0] = 'l';  //uses left to define just direction
  }
  else{
  myPort.write('a');
  zumoMessageField.setText("Turning left");
  }
  
} //_CODE_:leftButton:973729:

public void rightClick(GButton source, GEvent event) { //_CODE_:rightButton:383762:
  if (corner[0] == '@')
  {
    corner[0] = 'r';  //uses right to define just direction
  }
  else{
  myPort.write('d');
  zumoMessageField.setText("Turning right");
  }
} //_CODE_:rightButton:383762:

public void caliClick(GButton source, GEvent event) { //_CODE_:caliButton:976997:
  myPort.write('q');
  zumoMessageField.setText("Calibrating sensors!");
} //_CODE_:caliButton:976997:

public void corridorClick(GButton source, GEvent event) { //_CODE_:corridorButton:631446:
  myPort.write('c');
  zumoMessageField.setText("Moving through corridor");
} //_CODE_:corridorButton:631446:

public void cornerClick(GButton source, GEvent event) { //_CODE_:cornerButton:589404:
  if(corner[0] == 'l' || corner[0]=='r')
  {
    myPort.write(corner[0]);
    corner[0] = '#'; //Reset character
    zumoMessageField.setText("***Auto-turning***");
  }
  else if (corner[0] == '#')
  {
  zumoMessageField.setText("Please select corner direction and repress button");
  corner[0] = '@'; //Character to indicate that auto rotate has been selected.
  }
  
} //_CODE_:cornerButton:589404:

public void roomClick(GButton source, GEvent event) { //_CODE_:roomButton:246396:
  myPort.write('i');
  zumoMessageField.setText("Searching room");
} //_CODE_:roomButton:246396:

public void zumoMessage_change1(GTextField source, GEvent event) { //_CODE_:zumoMessageField:607837:
  println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:zumoMessageField:607837:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  forwardButton = new GButton(this, 95, 29, 80, 30);
  forwardButton.setText("Forward");
  forwardButton.addEventHandler(this, "forwardClick");
  reverseButton = new GButton(this, 96, 101, 80, 30);
  reverseButton.setText("Reverse");
  reverseButton.addEventHandler(this, "reverseClick");
  stopButton = new GButton(this, 96, 65, 80, 30);
  stopButton.setText("Stop");
  stopButton.addEventHandler(this, "stopClick");
  leftButton = new GButton(this, 7, 65, 80, 30);
  leftButton.setText("Left");
  leftButton.addEventHandler(this, "leftClick");
  rightButton = new GButton(this, 181, 65, 80, 30);
  rightButton.setText("Right");
  rightButton.addEventHandler(this, "rightClick");
  caliButton = new GButton(this, 325, 65, 80, 30);
  caliButton.setText("Calibrate Sensors");
  caliButton.addEventHandler(this, "caliClick");
  corridorButton = new GButton(this, 325, 101, 80, 30);
  corridorButton.setText("Auto-Corridor");
  corridorButton.addEventHandler(this, "corridorClick");
  cornerButton = new GButton(this, 325, 26, 80, 30);
  cornerButton.setText("Auto-Corner");
  cornerButton.addEventHandler(this, "cornerClick");
  label1 = new GLabel(this, 28, 212, 103, 21);
  label1.setText("Zumo message:");
  label1.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  label1.setOpaque(false);
  roomButton = new GButton(this, 325, 141, 80, 30);
  roomButton.setText("Room Search");
  roomButton.addEventHandler(this, "roomClick");
  zumoMessageField = new GTextField(this, 28, 237, 297, 29, G4P.SCROLLBARS_NONE);
  zumoMessageField.setOpaque(true);
  zumoMessageField.addEventHandler(this, "zumoMessage_change1");
}

// Variable declarations 
// autogenerated do not edit
GButton forwardButton; 
GButton reverseButton; 
GButton stopButton; 
GButton leftButton; 
GButton rightButton; 
GButton caliButton; 
GButton corridorButton; 
GButton cornerButton; 
GLabel label1; 
GButton roomButton; 
GTextField zumoMessageField; 
